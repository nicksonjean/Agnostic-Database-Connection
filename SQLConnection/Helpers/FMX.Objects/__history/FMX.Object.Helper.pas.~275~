unit FMX.&Object.Helper;

interface

uses
  System.Classes,
  System.UITypes,
  System.SysUtils,
  FMX.Forms,
  FMX.Controls,
  FMX.StdCtrls,
  FMX.Types,
  FMX.Edit,
  FMX.Ani,
  FMX.Dialogs,
  EventDriven;

var
  VarHeight: Single;
  ConstHeight: Single;

type
  TControlCracker = class(TControl);

type
  TFMXObjectHelper = class helper for TFMXObject
  private
    procedure Enter(Sender: TObject; Height : Single);
    procedure Exit(Sender: TObject; Height : Single);
  public
    procedure Placeholder(Text: String; Form: TForm);
  end;

implementation

{ TFMXObjectHelper }

procedure TFMXObjectHelper.Enter(Sender: TObject; Height : Single);
var
  AnimateLabel : TLabel;
begin
  if (Self as TEdit).Text = EmptyStr then
  begin
    AnimateLabel := TLabel((Self as TEdit).FindComponent('Label'+(Self as TEdit).Name));
    FMX.Ani.TAnimator.AnimateFloat(AnimateLabel, 'Font.Size', 10, 0.1, TAnimationType.InOut, TInterpolationType.Elastic);
    FMX.Ani.TAnimator.AnimateFloat(AnimateLabel, 'Position.Y', Height, 0.1, TAnimationType.InOut, TInterpolationType.Elastic);
    AnimateLabel.FontColor := TAlphaColors.Royalblue;
  end;
end;
procedure TFMXObjectHelper.Exit(Sender: TObject; Height : Single);
var
  AnimateLabel : TLabel;
begin
  if (Self as TEdit).Text = EmptyStr then
  begin
    AnimateLabel := TLabel((Self as TEdit).FindComponent('Label'+(Self as TEdit).Name));
    FMX.Ani.TAnimator.AnimateFloat(AnimateLabel, 'Font.Size', TEdit(Self).TextSettings.Font.Size, 0.1, TAnimationType.InOut, TInterpolationType.Elastic);
    FMX.Ani.TAnimator.AnimateFloat(AnimateLabel, 'Position.Y', Height, 0.1, TAnimationType.InOut, TInterpolationType.Elastic);
    AnimateLabel.FontColor := TAlphaColors.Darkgray;
  end;
end;

procedure TFMXObjectHelper.Placeholder(Text: String; Form: TForm);
var
  &Label : TLabel;
begin
  VarHeight := Trunc(TEdit(Self).Height);
  ConstHeight := VarHeight;

  &Label := TLabel.Create(Self);
  &Label.Text := Text;
  &Label.Name := 'Label'+Self.Name;
  &Label.StyledSettings := [TStyledSetting.Family];
  &Label.TextSettings.Font.Family := TEdit(Self).TextSettings.Font.Family;
  &Label.TextSettings.Font.Size := TEdit(Self).TextSettings.Font.Size;
  &Label.TextSettings.FontColor := TAlphaColors.Darkgray;
  &Label.Position.X := 3;
  &Label.Position.Y := ((ConstHeight - &Label.Height) / 2);
  &Label.Parent := Self;

  TEdit(Self).OnResize := DelegateEvent(
    TEdit(Self),
    procedure(Sender: TObject)
    begin
      VarHeight := Trunc(TEdit(Self).Height);
      if ( ( not(Self as TEdit).IsFocused) and ( not(Self as TEdit) = EmptyStr) ) then
        &Label.Position.Y := ((VarHeight - &Label.Height) / 2);
    end
  );

  TControlCracker(Form).OnResize := DelegateEvent(
    Form,
    procedure(Sender: TObject)
    begin
      ConstHeight := Trunc(TEdit(Self).Height);
    end
  );

  TEdit(Self).OnEnter := DelegateEvent(
    TEdit(Self),
    procedure(Sender: TObject)
    begin
      Self.Enter(Sender, -( (ConstHeight/2) + 4 ));
    end
  );

  TEdit(Self).OnExit := DelegateEvent(
    TEdit(Self),
    procedure(Sender: TObject)
    begin
      Self.Exit(Sender, ((VarHeight - &Label.Height) / 2));
    end
  );

end;

end.
