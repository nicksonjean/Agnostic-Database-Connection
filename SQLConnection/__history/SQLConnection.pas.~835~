{
  SQLConnection.
  ------------------------------------------------------------------------------
  Objetivo : Simplificar a conexão à Bancos de Dados via codigos livre de
  componentes de terceiros.
  Suporta 3 tipos de componentes do dbExpres, ZeOSLIB e FireDAC.
  ------------------------------------------------------------------------------
  Autor : Nickson Jeanmerson
  Colaborador : Ramon Ruan
  ------------------------------------------------------------------------------
  Esta biblioteca é software livre; você pode redistribuí-la e/ou modificá-la
  sob os termos da Licença Pública Geral Menor do GNU conforme publicada pela
  Free Software Foundation; tanto a versão 3.29 da Licença, ou (a seu critério)
  qualquer versão posterior.
  Esta biblioteca é distribuída na expectativa de que seja útil, porém, SEM
  NENHUMA GARANTIA; nem mesmo a garantia implícita de COMERCIABILIDADE OU
  ADEQUAÇÃO A UMA FINALIDADE ESPECÍFICA. Consulte a Licença Pública Geral Menor
  do GNU para mais detalhes. (Arquivo LICENÇA.TXT ou LICENSE.TXT)
  Você deve ter recebido uma cópia da Licença Pública Geral Menor do GNU junto
  com esta biblioteca; se não, escreva para a Free Software Foundation, Inc.,
  no endereço 59 Temple Street, Suite 330, Boston, MA 02111-1307 USA.
  Você também pode obter uma copia da licença em:
  http://www.opensource.org/licenses/lgpl-license.php
}

//https://www.delphigeist.com/ //TArraySlice

unit SQLConnection;

interface

{ Carrega a Interface Padrão }
{$I CNX.Default.inc}

uses
  System.SysUtils,
  System.IOUtils,
  System.StrUtils,
  System.DateUtils,
  System.Classes,
  System.Math,

  System.SyncObjs,
  System.Threading,
  System.Generics.Collections,
  System.RTLConsts,
  System.Variants,
  System.JSON,
  System.RTTI,
  System.TypInfo,
  System.NetEncoding,

  Data.DBConsts,
  Data.DB,
  Data.FMTBcd,
  Data.SqlExpr,
  Data.SqlTimSt,
  Data.DBCommonTypes,

  FMX.Types,
  FMX.Forms,
  FMX.Grid,
  FMX.ComboEdit,
  FMX.ListBox,
  FMX.ListView.Types,
  FMX.ListView.Appearances,
  FMX.ListView.Adapters.Base,
  FMX.ListView,
  FMX.SearchBox,
  FMX.StdCtrls,

  FMX.Dialogs,

  Datasnap.DBClient,
  Datasnap.Provider,

  {dbExpress}
{$IFDEF dbExpressLib}
  Data.DBXSqlite,
{$IFDEF MSWINDOWS}
  Data.DBXMySql,
  Data.DBXMSSQL,
  Data.DBXOracle,
  Data.DBXFirebird,
  Data.DBXInterBase,
{$IFDEF DBXDevartLib}
  DBXDevartPostgreSQL,
{$ENDIF}
{$ENDIF}
{$ENDIF}
  {ZeOSLib}
{$IFDEF MSWINDOWS}
{$IFDEF ZeOSLib}
  ZAbstractConnection,
  ZAbstractRODataset,
  ZAbstractDataset,
  ZDataset,
  ZConnection,
  ZAbstractTable,
  ZDbcConnection,
  ZClasses,
  ZDbcIntfs,
  ZTokenizer,
  ZCompatibility,
  ZGenericSqlToken,
  ZGenericSqlAnalyser,
  ZPlainDriver,
  ZURL,
  ZCollections,
  ZVariant,
{$ENDIF}
{$ENDIF}
  {FireDAC}
{$IFDEF FireDACLib}
  FireDAC.DatS,
  FireDAC.DApt,
  FireDAC.DApt.Intf,
  FireDAC.Comp.Client,
  FireDAC.Comp.DataSet,
  FireDAC.Comp.UI,
  FireDAC.Stan.Intf,
  FireDAC.Stan.Option,
  FireDAC.Stan.Error,
  FireDAC.Stan.Def,
  FireDAC.Stan.Pool,
  FireDAC.Stan.Async,
  FireDAC.Stan.Param,
  FireDAC.Stan.ExprFuncs,
  FireDAC.UI.Intf,
  FireDAC.FMXUI.Wait,
  FireDAC.Phys,
  FireDAC.Phys.Intf,
  FireDAC.Phys.SQLite,
  FireDAC.Phys.SQLiteDef,
{$IFDEF MSWINDOWS}
  FireDAC.Phys.MySQL,
  FireDAC.Phys.MySQLDef,
  FireDAC.Phys.FB,
  FireDAC.Phys.FBDef,
  FireDAC.Phys.PG,
  FireDAC.Phys.PGDef,
{$ENDIF}
{$ENDIF}

  MimeType,
  &Array,
  &String,
  Float,

  System.Types,
{$IFDEF MSWINDOWS}
  Winapi.Windows,
  Winapi.Messages,
  FMX.Platform.Win,
{$ELSE}
  System.ByteStrings,
  FMX.Platform.Android,
  FMX.Helpers.Android,
{$ENDIF}
  System.UITypes;

type        // OK     OK       OK                                     OK
  TDriver = (SQLite, MySQL, FIREBIRD, INTERBASE, SQLSERVER, MSSQL, POSTGRES, ORACLE);

  { Design Pattern Singleton }
type
  TSingleton<T: class, constructor> = class
  strict private
    class var SInstance: T;
  public
    class function GetInstance(): T;
    class procedure ReleaseInstance();
  end;

  { Classe Helper para o Objeto TSQLQuery ou TZQuery ou TFDQuery }
type
  TQueryHelper = class helper for {$I CNX.Query.Type.inc}
  public
    procedure Open(SQL: String); overload;
  end;

  { Classe TConnection Herdada de TObject }
type
  TConnection = class(TObject)
  private
    { Private declarations }
    class var FInstance: TConnection;
    class var FSQLInstance: {$I CNX.Type.inc};
    class var FDriver: TDriver;
    class var FHost: String;
    class var FSchema: String;
    class var FDatabase: String;
    class var FUsername: String;
    class var FPassword: String;
    class var FPort: Integer;
    class procedure SetDriver(const Value: TDriver); static;
    class function GetConnection: {$I CNX.Type.inc}; static;
{$IFDEF dbExpressLib}
    class var FTransaction: TTransactionDesc;
{$ENDIF}
  public
    { Public declarations }
    constructor Create;
    destructor Destroy; override;
    class property Driver: TDriver read FDriver write SetDriver default SQLite;
    class property Host: String read FHost write FHost;
    class property Schema: String read FSchema write FSchema;
    class property Database: String read FDatabase write FDatabase;
    class property Username: String read FUsername write FUsername;
    class property Password: String read FPassword write FPassword;
    class property Port: Integer read FPort write FPort;
    class property Connection: {$I CNX.Type.inc} read GetConnection;
    class function GetInstance: TConnection;
    class procedure StartTransaction;
    class procedure Commit;
    class procedure Rollback;
    class function CheckDatabase : Boolean;
  end;

  { Cria Instancia Singleton da Classe TConnection }
type
  TConnectionClass = TSingleton<TConnection>;

  { Classe TQuery Herdada de TConnection }
type
  TQuery = class(TConnection)
  private
    { Private declarations }
    FInstance: TConnection;
    FQuery: {$I CNX.Query.Type.inc};
  public
    { Public declarations }
    constructor Create;
    destructor Destroy; override;
    property Query: {$I CNX.Query.Type.inc} read FQuery write FQuery;
  end;

  { Record TQueryBuilder para Criação de Consultas para a Classe TQuery }
type
  TQueryBuilder = record
  const
    FieldTypes: Array [TFieldType] of String = ('ftUnknown', 'ftString', 'ftSmallint', 'ftInteger', 'ftWord', 'ftBoolean', 'ftFloat', 'ftCurrency', 'ftBCD', 'ftDate', 'ftTime', 'ftDateTime', 'ftBytes', 'ftVarBytes', 'ftAutoInc', 'ftBlob', 'ftMemo', 'ftGraphic', 'ftFmtMemo', 'ftParadoxOle', 'ftDBaseOle', 'ftTypedBinary', 'ftCursor', 'ftFixedChar', 'ftWideString', 'ftLargeint', 'ftADT', 'ftArray', 'ftReference', 'ftDataSet', 'ftOraBlob', 'ftOraClob', 'ftVariant', 'ftInterface', 'ftIDispatch', 'ftGuid', 'ftTimeStamp', 'ftFMTBcd', 'ftFixedWideChar', 'ftWideMemo', 'ftOraTimeStamp', 'ftOraInterval', 'ftLongWord', 'ftShortint', 'ftByte', 'ftExtended', 'ftConnection', 'ftParams', 'ftStream', 'ftTimeStampOffset', 'ftObject', 'ftSingle');
    ReservedWords: Array of String = ['NOW()', 'CURTIME()', 'CURDATE()', 'CURRENT_DATE', 'CURRENT_TIME', 'CURRENT_TIMESTAMP'];
  strict private
    { Strict Private declarations }
    function ReservedWord<T: Class>(Value : String; Helper: String): String; overload;
    function ReservedWord<T: Class>(Key: String; Value : String; Helper: String): String; overload;
    function InsertToStr<T: Class>(&Array: T): String;
    function UpdateToStr<T: Class>(&Array: T): String;
    function WhereToStr<T: Class>(&Array: T): String;
  private
    { Private declarations }
    function Query(Input: String; Mode: Boolean = False) : TQuery;
    function FetchOne<T: Class>(Input : String; out &Array: T): TQuery; overload;
    function FetchAll<T: Class>(Input : String; out &Array: T): TQuery; overload;
    function Insert<T: Class>(Table: String; Field: T; Run: Boolean = False; Ignore: Boolean = False): String; overload;
    function Update<T: Class>(Table: String; Field: T; Run: Boolean = False): String; overload;
    function Update<T: Class; F: Class>(Table: String; Field: T; Where: F; Run: Boolean = False): String; overload;
    function Replace<T: Class>(Table: String; Field: T; Run: Boolean = False): String; overload;
    function Replace<T: Class; F: Class>(Table: String; Field: T; Where: F; Run: Boolean = False): String; overload;
    function Upsert<T: Class>(Table: String; Field: T; Run: Boolean = False; Ignore: Boolean = False; Duplicate: Boolean = False): String; overload;
    function Delete<T: Class>(Table: String; Run: Boolean = False): String; overload;
    function Delete<T: Class>(Table: String; Where: T; Run: Boolean = False) : String; overload;
  public
    { Public declarations }
    procedure StartTransaction;
    procedure Commit;
    procedure Rollback;
    function View(Input: String; const Mode: Boolean = False): TQuery;
    function Exec(Input: String; const Mode: Boolean = True): TQuery;
    function ToJSON(Input: String; Prettify : Boolean = False): String;
    function ToXML(Input: String; Prettify : Boolean = False): String;
    function FetchOne(Input: String; out &Array: TArray): TQuery; overload;
    function FetchOne(Input: String; out &Array: TArrayVariant): TQuery; overload;
    function FetchOne(Input: String; out &Array: TArrayField): TQuery; overload;
    //function FetchAll(Input: String; out &Array: TArrayAssoc): TQuery; overload;
    function Insert(Table: String; Field: TArray; Run: Boolean = False; Ignore: Boolean = False): String; overload;
    function Insert(Table: String; Field: TArrayVariant; Run: Boolean = False; Ignore: Boolean = False): String; overload;
    function Insert(Table: String; Field: TArrayField; Run: Boolean = False; Ignore: Boolean = False): String; overload;
    //function Insert(Table: String; Field: TArrayAssoc; Run: Boolean = False; Ignore: Boolean = False): String; overload;
    function Update(Table: String; Field: TArray; Run: Boolean = False): String; overload;
    function Update(Table: String; Field: TArrayVariant; Run: Boolean = False) : String; overload;
    function Update(Table: String; Field: TArrayField; Run: Boolean = False) : String; overload;
    //function Update(Table: String; Field: TArrayAssoc; Run: Boolean = False) : String; overload;
    function Update(Table: String; Field: TArray; Where: TArray; Run: Boolean = False): String; overload;
    function Update(Table: String; Field: TArrayVariant; Where: TArrayVariant; Run: Boolean = False): String; overload;
    function Update(Table: String; Field: TArrayField; Where: TArrayVariant; Run: Boolean = False): String; overload;
    //function Update(Table: String; Field: TArrayAssoc; Where: TArrayVariant; Run: Boolean = False): String; overload;
    function Replace(Table: String; Field: TArray; Run: Boolean = False) : String; overload;
    function Replace(Table: String; Field: TArrayVariant; Run: Boolean = False) : String; overload;
    function Replace(Table: String; Field: TArrayField; Run: Boolean = False) : String; overload;
    //function Replace(Table: String; Field: TArrayAssoc; Run: Boolean = False) : String; overload;
    function Replace(Table: String; Field: TArray; Where: TArray; Run: Boolean = False): String; overload;
    function Replace(Table: String; Field: TArrayVariant; Where: TArrayVariant; Run: Boolean = False): String; overload;
    function Replace(Table: String; Field: TArrayField; Where: TArrayVariant; Run: Boolean = False): String; overload;
    //function Replace(Table: String; Field: TArrayAssoc; Where: TArrayVariant; Run: Boolean = False): String; overload;
    function Upsert(Table: String; Field: TArray; Run: Boolean = False; Ignore: Boolean = False; Duplicate: Boolean = False): String; overload;
    function Upsert(Table: String; Field: TArrayVariant; Run: Boolean = False; Ignore: Boolean = False; Duplicate: Boolean = False): String; overload;
    function Upsert(Table: String; Field: TArrayField; Run: Boolean = False; Ignore: Boolean = False; Duplicate: Boolean = False): String; overload;
    //function Upsert(Table: String; Field: TArrayAssoc; Run: Boolean = False; Ignore: Boolean = False; Duplicate: Boolean = False): String; overload;
    function Delete(Table: String; Run: Boolean = False): String; overload;
    function Delete(Table: String; Where: TArray; Run: Boolean = False) : String; overload;
    function Delete(Table: String; Where: TArrayVariant; Run: Boolean = False): String; overload;
  end;

implementation

{ Singleton }

class function TSingleton<T>.GetInstance: T;
begin
  if not Assigned(Self.SInstance) then
    Self.SInstance := T.Create();
  Result := Self.SInstance;
end;

class procedure TSingleton<T>.ReleaseInstance;
begin
  if Assigned(Self.SInstance) then
    Self.SInstance.Free;
end;

{ TQueryHelper }

procedure TQueryHelper.Open(SQL: String);
{$IFDEF FireDACLib}
var
  Task: ITask;
{$ENDIF}
begin
{$IFDEF FireDACLib}
  if Self.Command.State <> csExecuting then
  begin
    Task := TTask.Create(
      procedure()
      begin
        Self.Open(SQL);
      end);
    Task.Start;
  end;
{$ENDIF}
{$IFDEF dbExpressLib}
  Self.Open(SQL);
{$ENDIF}
{$IFDEF ZeOSLib}
  Self.Open(SQL);
{$ENDIF}
end;

{ TConnection }

constructor TConnection.Create;
begin
  inherited Create;
end;

destructor TConnection.Destroy;
begin
  if Assigned(FInstance) then
    FreeAndNil(FInstance);
  if Assigned(FSQLInstance) then
    FreeAndNil(FSQLInstance);

  inherited;
end;

class procedure TConnection.SetDriver(const Value: TDriver);
begin
  FDriver := Value;
end;

class function TConnection.GetConnection: {$I CNX.Type.inc};
begin
  Result := FSQLInstance;
end;

class function TConnection.GetInstance: TConnection;
begin
  try
    if not Assigned(FInstance) then
    begin
      FInstance := TConnection.Create;
      TConnection.FInstance.FSQLInstance := {$I CNX.Type.inc}.Create(nil);
{$I CNX.Params.inc}
    end;
  except
    on E: Exception do
      raise Exception.Create(E.Message);
  end;
  Result := FInstance;
end;

class procedure TConnection.StartTransaction;
begin
  if Assigned(FInstance) then
  begin
{$IFDEF dbExpressLib}
    FTransaction.IsolationLevel := xilREADCOMMITTED;
    FInstance.Connection.StartTransaction(FTransaction);
{$ENDIF}
{$IFDEF FireDACLib}
    FInstance.Connection.StartTransaction;
{$ENDIF}
{$IFDEF ZeOSLib}
    FInstance.Connection.StartTransaction;
{$ENDIF}
  end;
end;

class procedure TConnection.Commit;
begin
{$IFDEF dbExpressLib}
    FInstance.Connection.Commit(FTransaction);
{$ENDIF}
{$IFDEF FireDACLib}
    FInstance.Connection.Commit;
{$ENDIF}
{$IFDEF ZeOSLib}
    FInstance.Connection.Commit;
{$ENDIF}
end;

class procedure TConnection.Rollback;
begin
{$IFDEF dbExpressLib}
    FInstance.Connection.Rollback(FTransaction);
{$ENDIF}
{$IFDEF FireDACLib}
    FInstance.Connection.Rollback;
{$ENDIF}
{$IFDEF ZeOSLib}
    FInstance.Connection.Rollback;
{$ENDIF}
end;

class function TConnection.CheckDatabase: Boolean;
var
  Query: TQueryBuilder;
  SQL: TQuery;
begin
  Result := false;
  case FInstance.Driver of
    MySQL :
    begin
      SQL := Query.View('SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME = ' + QuotedStr(FInstance.Database));
      if not SQL.Query.IsEmpty then
        Result := True;
    end;
    POSTGRES:
    begin
      SQL := Query.View('SELECT 1 AS result FROM pg_database WHERE datname = ' + QuotedStr(FInstance.Database));
      if not SQL.Query.IsEmpty then
        Result := True;
    end;
    ORACLE :
    begin

    end;
    SQLite, FIREBIRD, INTERBASE:
    begin

    end;
    SQLSERVER, MSSQL:
    begin

    end;
  end;
end;

{ TQuery }

constructor TQuery.Create;
begin
  FInstance := TConnection.Create;
  FQuery := {$I CNX.Query.Type.inc}.Create(nil);
{$IFDEF dbExpressLib}
  FQuery.SQLConnection := FInstance.GetInstance.Connection;
{$ENDIF}
{$IFDEF FireDACLib}
  FQuery.Connection := FInstance.GetInstance.Connection;
{$ENDIF}
{$IFDEF ZeOSLib}
  FQuery.Connection := FInstance.GetInstance.Connection;
{$ENDIF}
end;

destructor TQuery.Destroy;
begin
  inherited;
end;

{ TQueryBuilder }

function TQueryBuilder.Query(Input: String; Mode: Boolean = False): TQuery;
var
  SQL: TQuery;
begin
  SQL := TQuery.Create;
  SQL.Query.Close;
  SQL.Query.SQL.Clear;
  SQL.Query.SQL.Text := Input;
  if not Mode then
    SQL.Query.Open
  else
    SQL.Query.ExecSQL;
  Result := SQL;
end;

function TQueryBuilder.FetchOne<T>(Input : String; out &Array: T): TQuery;
var
  I : Integer;
  SQL: TQuery;
  Query: TQueryBuilder;
begin
  SQL := Query.View(Input);
  if not(SQL.Query.IsEmpty) then
  begin
    if (TypeInfo(T) = TypeInfo(TArray)) then
      TArray(&Array).Clear
    else if (TypeInfo(T) = TypeInfo(TArrayVariant)) then
      TArrayVariant(&Array).Clear
    else
      TArrayField(&Array).Clear;
    while not SQL.Query.Eof do // Linhas
    begin
      for I := 0 to SQL.Query.FieldCount - 1 do // Colunas
      begin
        //Showmessage((I+1).ToString + ' ' + SQL.Query.Fields[I].DisplayName + ' ' + FieldTypes[SQL.Query.Fields[I].DataType]);
        if SQL.Query.FieldByName(SQL.Query.Fields[I].DisplayName).IsNull then
        begin
          if (TypeInfo(T) = TypeInfo(TArray)) then
            TArray(&Array).AddKeyValue(SQL.Query.Fields[I].DisplayName, NUL)
          else if (TypeInfo(T) = TypeInfo(TArrayVariant)) then
            TArrayVariant(&Array).AddKeyValue(SQL.Query.Fields[I].DisplayName, NUL)
          else
            TArrayField(&Array).AddKeyValue(SQL.Query.Fields[I].DisplayName, SQL.Query.Fields[I])
        end
        else
        begin
          if (TypeInfo(T) = TypeInfo(TArray)) then
            TArray(&Array).AddKeyValue(SQL.Query.Fields[I].DisplayName, TArrayVariantHelper.VarToStr(SQL.Query.FieldValues[SQL.Query.Fields[I].DisplayName], EmptyStr, TBinaryMode.Write))
          else if (TypeInfo(T) = TypeInfo(TArrayVariant)) then
            TArrayVariant(&Array).AddKeyValue(SQL.Query.Fields[I].DisplayName, TArrayVariantHelper.VarToStr(SQL.Query.FieldValues[SQL.Query.Fields[I].DisplayName], EmptyStr, TBinaryMode.Write))
          else
            TArrayField(&Array).AddKeyValue(SQL.Query.Fields[I].DisplayName, SQL.Query.Fields[I])
        end;
      end;
      SQL.Query.Next;
    end;
  end;
  Result := SQL;
end;

function TQueryBuilder.FetchAll<T>(Input : String; out &Array: T): TQuery;
begin
  //Result := TQuery;
end;

function TQueryBuilder.Insert<T>(Table: String; Field: T; Run: Boolean = False; Ignore: Boolean = False): String;
var
  I: Integer;
  Query: TQueryBuilder;
  DBFields, DBValues: String;
begin
  DBFields := EmptyStr;
  DBValues := EmptyStr;

  if (TypeInfo(T) = TypeInfo(TArray)) then
  begin
    for I := 0 to TArray(Field).Count - 1 do
    begin
      DBFields := DBFields + ',' + TArray(Field).Names[I] + EmptyStr;
      DBValues := Self.ReservedWord<TArray>(TArray(Field).ValuesAtIndex[I], TArrayHelper.StrToStr(TArray(Field).ValuesAtIndex[I], SQUOTE));
    end;
  end
  else if (TypeInfo(T) = TypeInfo(TArrayVariant)) then
  begin
    for I := 0 to TArrayVariant(Field).Count - 1 do
    begin
      DBFields := DBFields + ',' + TArrayVariant(Field).Key[I] + EmptyStr;
      DBValues := Self.ReservedWord<TArrayVariant>(TArrayVariant(Field).ValuesAtIndex[I], TArrayVariantHelper.VarToStr(TArrayVariant(Field).ValuesAtIndex[I], SQUOTE, TBinaryMode.Write));
    end;
  end
  else
  begin
    for I := 0 to TArrayField(Field).Count - 1 do
    begin
      DBFields := DBFields + ',' + TArrayField(Field).Key[I] + EmptyStr;
      DBValues := Self.ReservedWord<TArrayField>(TArrayField(Field).ValuesAtIndex[I].AsString, TArrayVariantHelper.VarToStr(TArrayField(Field).ValuesAtIndex[I].AsVariant, SQUOTE, TBinaryMode.Write));
    end;
  end;

  System.Delete(DBFields, 1, 1);
  System.Delete(DBValues, 1, 1);

  Result := 'INSERT' + (System.StrUtils.IfThen(Ignore = True, ' IGNORE', EmptyStr)) + ' INTO ' + Trim(Table) + ' (' + Trim(DBFields) + ') VALUES (' + Trim(DBValues) + ');';

  if Run then
    Query.Exec(Result);
end;

function TQueryBuilder.Update<T>(Table: String; Field: T; Run: Boolean = False): String;
var
  I: Integer;
  Query: TQueryBuilder;
  DBValues: String;
begin
  DBValues := EmptyStr;

  if (TypeInfo(T) = TypeInfo(TArray)) then
    for I := 0 to TArray(Field).Count - 1 do
      DBValues := Self.ReservedWord<TArray>(TArray(Field).Names[I], TArray(Field).ValuesAtIndex[I], TArrayHelper.StrToStr(TArray(Field).ValuesAtIndex[I], SQUOTE))
  else if (TypeInfo(T) = TypeInfo(TArrayVariant)) then
    for I := 0 to TArrayVariant(Field).Count - 1 do
      DBValues := Self.ReservedWord<TArrayVariant>(TArrayVariant(Field).Key[I], TArrayVariant(Field).ValuesAtIndex[I], TArrayVariantHelper.VarToStr(TArrayVariant(Field).ValuesAtIndex[I], SQUOTE, TBinaryMode.Write))
  else
    for I := 0 to TArrayField(Field).Count - 1 do
      DBValues := Self.ReservedWord<TArrayField>(TArrayField(Field).Key[I], TArrayField(Field).ValuesAtIndex[I].AsString, TArrayVariantHelper.VarToStr(TArrayField(Field).ValuesAtIndex[I].AsVariant, SQUOTE, TBinaryMode.Write));

  System.Delete(DBValues, 1, 1);

  Result := 'UPDATE ' + Table + ' SET ' + DBValues;

  if Run then
    Query.Exec(Result);
end;

function TQueryBuilder.Update<T, F>(Table: String; Field: T; Where: F; Run: Boolean = False): String;
var
  I: Integer;
  Query: TQueryBuilder;
  DBValues, DBFilters: String;
begin
  DBValues := EmptyStr;
  DBFilters := EmptyStr;

  if (TypeInfo(T) = TypeInfo(TArray)) then
    for I := 0 to TArray(Field).Count - 1 do
      DBValues := Self.ReservedWord<TArray>(TArray(Field).Names[I], TArray(Field).ValuesAtIndex[I], TArrayHelper.StrToStr(TArray(Field).ValuesAtIndex[I], SQUOTE))
  else if (TypeInfo(T) = TypeInfo(TArrayVariant)) then
    for I := 0 to TArrayVariant(Field).Count - 1 do
      DBValues := Self.ReservedWord<TArrayVariant>(TArrayVariant(Field).Key[I], TArrayVariant(Field).ValuesAtIndex[I], TArrayVariantHelper.VarToStr(TArrayVariant(Field).ValuesAtIndex[I], SQUOTE, TBinaryMode.Write))
  else
    for I := 0 to TArrayField(Field).Count - 1 do
      DBValues := Self.ReservedWord<TArrayField>(TArrayField(Field).Key[I], TArrayField(Field).ValuesAtIndex[I].AsString, TArrayVariantHelper.VarToStr(TArrayField(Field).ValuesAtIndex[I].AsVariant, SQUOTE, TBinaryMode.Write));

  System.Delete(DBValues, 1, 1);

  if (TypeInfo(F) = TypeInfo(TArray)) then
    DBFilters := Self.WhereToStr<TArray>(TArray(Where))
  else
    DBFilters := Self.WhereToStr<TArrayVariant>(TArrayVariant(Where));

  Result := 'UPDATE ' + Table + ' SET ' + DBValues + ' WHERE ' + DBFilters;

  if Run then
    Query.Exec(Result);
end;

function TQueryBuilder.Delete<T>(Table: String; Run: Boolean = False) : String;
var
  Query: TQueryBuilder;
begin
  Result := 'DELETE FROM ' + Table;

  if Run then
    Query.Exec(Result);
end;

function TQueryBuilder.Delete<T>(Table: String; Where: T; Run: Boolean = False) : String;
var
  I : Integer;
  Query: TQueryBuilder;
  DBFilters: String;
begin
  DBFilters := EmptyStr;

  if (TypeInfo(T) = TypeInfo(TArray)) then
  begin
    for I := 0 to TArray(Where).Count - 1 do
      DBFilters := DBFilters + TArray(Where).Names[I] + SSPACE + TArrayHelper.StrToStr(TArray(Where).ValuesAtIndex[I], SQUOTE) + SSPACE;
  end
  else
  begin
    for I := 0 to TArrayVariant(Where).Count - 1 do
      DBFilters := DBFilters + TArrayVariant(Where).Key[I] + SSPACE + TArrayVariantHelper.VarToStr(TArrayVariant(Where).ValuesAtIndex[I], SQUOTE, TBinaryMode.Read) + SSPACE;
  end;

  System.Delete(DBFilters, Length(DBFilters), 1);

  Result := 'DELETE FROM ' + Table + ' WHERE ' + DBFilters;

  if Run then
    Query.Exec(Result);
end;

function TQueryBuilder.Replace<T>(Table: String; Field: T; Run: Boolean = False): String;
var
  I: Integer;
  Query: TQueryBuilder;
  DBFields, DBValues: String;
begin
  DBFields := EmptyStr;
  DBValues := EmptyStr;

  if (TypeInfo(T) = TypeInfo(TArray)) then
  begin
    for I := 0 to TArray(Field).Count - 1 do
    begin
      DBFields := DBFields + ',' + TArray(Field).Names[I] + EmptyStr;
      DBValues := Self.ReservedWord<TArray>(TArray(Field).ValuesAtIndex[I], TArrayHelper.StrToStr(TArray(Field).ValuesAtIndex[I], SQUOTE));
    end;
  end
  else if (TypeInfo(T) = TypeInfo(TArrayVariant)) then
  begin
    for I := 0 to TArrayVariant(Field).Count - 1 do
    begin
      DBFields := DBFields + ',' + TArrayVariant(Field).Key[I] + EmptyStr;
      DBValues := Self.ReservedWord<TArrayVariant>(TArrayVariant(Field).ValuesAtIndex[I], TArrayVariantHelper.VarToStr(TArrayVariant(Field).ValuesAtIndex[I], SQUOTE, TBinaryMode.Write));
    end;
  end
  else
  begin
    for I := 0 to TArrayField(Field).Count - 1 do
    begin
      DBFields := DBFields + ',' + TArrayField(Field).Key[I] + EmptyStr;
      DBValues := Self.ReservedWord<TArrayField>(TArrayField(Field).ValuesAtIndex[I].AsString, TArrayVariantHelper.VarToStr(TArrayField(Field).ValuesAtIndex[I].AsVariant, SQUOTE, TBinaryMode.Write));
    end;
  end;

  System.Delete(DBFields, 1, 1);
  System.Delete(DBValues, 1, 1);

  Result := 'REPLACE INTO ' + Table + ' (' + DBFields + ') VALUES (' + DBValues + ')';

  if Run then
    Query.Exec(Result);
end;

function TQueryBuilder.Replace<T, F>(Table: String; Field: T; Where: F; Run: Boolean = False): String;
var
  I: Integer;
  Query: TQueryBuilder;
  DBFields, DBValues, DBFilters: String;
begin
  DBFields := EmptyStr;
  DBValues := EmptyStr;
  DBFilters := EmptyStr;

  if (TypeInfo(T) = TypeInfo(TArray)) then
  begin
    for I := 0 to TArray(Field).Count - 1 do
    begin
      DBFields := DBFields + ',' + TArray(Field).Names[I] + EmptyStr;
      DBValues := Self.ReservedWord<TArray>(TArray(Field).ValuesAtIndex[I], TArrayHelper.StrToStr(TArray(Field).ValuesAtIndex[I], SQUOTE));
    end;
  end
  else if (TypeInfo(T) = TypeInfo(TArrayVariant)) then
  begin
    for I := 0 to TArrayVariant(Field).Count - 1 do
    begin
      DBFields := DBFields + ',' + TArrayVariant(Field).Key[I] + EmptyStr;
      DBValues := Self.ReservedWord<TArrayVariant>(TArrayVariant(Field).ValuesAtIndex[I], TArrayVariantHelper.VarToStr(TArrayVariant(Field).ValuesAtIndex[I], SQUOTE, TBinaryMode.Write));
    end;
  end
  else
  begin
    for I := 0 to TArrayField(Field).Count - 1 do
    begin
      DBFields := DBFields + ',' + TArrayField(Field).Key[I] + EmptyStr;
      DBValues := Self.ReservedWord<TArrayField>(TArrayField(Field).ValuesAtIndex[I].AsString, TArrayVariantHelper.VarToStr(TArrayField(Field).ValuesAtIndex[I].AsVariant, SQUOTE, TBinaryMode.Write));
    end;
  end;

  System.Delete(DBFields, 1, 1);
  System.Delete(DBValues, 1, 1);

  if (TypeInfo(T) = TypeInfo(TArray)) then
  begin
    for I := 0 to TArray(Where).Count - 1 do
      DBFilters := DBFilters + TArray(Where).Names[I] + SSPACE + TArrayHelper.StrToStr(TArray(Where).ValuesAtIndex[I], SQUOTE) + SSPACE;
  end
  else
  begin
    for I := 0 to TArrayVariant(Where).Count - 1 do
      DBFilters := DBFilters + TArrayVariant(Where).Key[I] + SSPACE + TArrayVariantHelper.VarToStr(TArrayVariant(Where).ValuesAtIndex[I], SQUOTE, TBinaryMode.Read) + SSPACE;
  end;

  System.Delete(DBFilters, Length(DBFilters), 1);

  Result := 'REPLACE INTO ' + Table + ' (' + DBFields + ') VALUES (' + DBValues + ')' + ' WHERE ' + DBFilters;

  if Run then
    Query.Exec(Result);
end;

function TQueryBuilder.Upsert<T>(Table: String; Field: T; Run: Boolean = False; Ignore: Boolean = False; Duplicate: Boolean = False): String;
var
  I: Integer;
  Query: TQueryBuilder;
  DBFields, DBValues, DBReplaces: String;
begin
  DBFields := EmptyStr;
  DBValues := EmptyStr;
  DBReplaces := EmptyStr;

  if (TypeInfo(T) = TypeInfo(TArray)) then
  begin
    for I := 0 to TArray(Field).Count - 1 do
    begin
      DBFields := DBFields + ',' + TArray(Field).Names[I] + EmptyStr;
      DBValues := Self.ReservedWord<TArray>(TArray(Field).ValuesAtIndex[I], TArrayHelper.StrToStr(TArray(Field).ValuesAtIndex[I], SQUOTE));
    end;
  end
  else if (TypeInfo(T) = TypeInfo(TArrayVariant)) then
  begin
    for I := 0 to TArrayVariant(Field).Count - 1 do
    begin
      DBFields := DBFields + ',' + TArrayVariant(Field).Key[I] + EmptyStr;
      DBValues := Self.ReservedWord<TArrayVariant>(TArrayVariant(Field).ValuesAtIndex[I], TArrayVariantHelper.VarToStr(TArrayVariant(Field).ValuesAtIndex[I], SQUOTE, TBinaryMode.Write));
    end;
  end
  else
  begin
    for I := 0 to TArrayField(Field).Count - 1 do
    begin
      DBFields := DBFields + ',' + TArrayField(Field).Key[I] + EmptyStr;
      DBValues := Self.ReservedWord<TArrayField>(TArrayField(Field).ValuesAtIndex[I].AsString, TArrayVariantHelper.VarToStr(TArrayField(Field).ValuesAtIndex[I].AsVariant, SQUOTE, TBinaryMode.Write));
    end;
  end;

  System.Delete(DBFields, 1, 1);
  System.Delete(DBValues, 1, 1);

  if Duplicate = True then
  begin
    DBReplaces := ' ON DUPLICATE KEY UPDATE';
    if (TypeInfo(T) = TypeInfo(TArray)) then
    begin
      for I := 0 to TArray(Field).Count - 1 do
        DBReplaces := DBReplaces + ' ' + TArray(Field).Names[I] + ' = ' + 'VALUES(' + TArray(Field).Names[I] + '),';
    end
    else if (TypeInfo(T) = TypeInfo(TArrayVariant)) then
    begin
      for I := 0 to TArrayVariant(Field).Count - 1 do
        DBReplaces := DBReplaces + ' ' + TArrayVariant(Field).Key[I] + ' = ' + 'VALUES(' + TArrayVariant(Field).Key[I] + '),';
    end
    else
    begin
      for I := 0 to TArrayField(Field).Count - 1 do
        DBReplaces := DBReplaces + ' ' + TArrayField(Field).Key[I] + ' = ' + 'VALUES(' + TArrayField(Field).Key[I] + '),';
    end;
    System.Delete(DBReplaces, Length(DBReplaces), 1);
  end;

  Result := 'INSERT' + (System.StrUtils.IfThen(Ignore = True, ' IGNORE', EmptyStr)) + ' INTO ' + Table + ' (' + DBFields + ') VALUES (' + DBValues + ')' + DBReplaces;

  if Run then
    Query.Exec(Result);
end;

function TQueryBuilder.View(Input: String; const Mode: Boolean = False): TQuery;
begin
  Result := Self.Query(Input, Mode);
end;

function TQueryBuilder.Exec(Input: String; const Mode: Boolean = True): TQuery;
begin
  Result := Self.Query(Input, Mode);
end;

function TQueryBuilder.toJSON(Input: String; Prettify : Boolean = False): String;
var
  SQL: TQuery;
  JSONObject: TJSONObject;
  JSONArray: TJSONArray;
  I: Integer;
  CollumnName, CollumnValue: String;
begin
  JSONArray := TJSONArray.Create;
  SQL := Self.Query(Input, False);
  with SQL.Query do
  begin
    if (RecordCount > 0) then
    begin
      while not Eof do
      begin
        JSONObject := TJSONObject.Create;
        for I := 0 to FieldDefs.Count - 1 do
        begin
          CollumnName := FieldDefs[I].Name;
          CollumnValue := FieldByName(CollumnName).AsString;
          JSONObject.AddPair(TJSONPair.Create(TJSONString.Create(CollumnName), TJSONString.Create(CollumnValue)));
        end;
        JSONArray.Add(JSONObject);
        Next;
      end;
      Result := JSONArray.ToString;
    end
    else
      Result := '';
  end;
end;

function TQueryBuilder.toXML(Input: String; Prettify : Boolean = False): String;
var
  S1, S2: String;
  SQL: TQuery;
  I, J: Integer;
  RowData, CollumnData: String;
  CollumnName, CollumnValue: String;
begin
  Result := EmptyStr;
  S1 := System.StrUtils.IfThen(Prettify, EOL, EmptyStr);
  S2 := System.StrUtils.IfThen(Prettify, DSpace, EmptyStr);
  RowData := EmptyStr;
  SQL := Self.Query(Input, False);
  with SQL.Query do
  begin
    if (RecordCount > 0) then
    begin
      J := 0;
      while not Eof do
      begin
        RowData := RowData + LTag + 'node row="' + J.ToString + '"' + RTag + S1;
        CollumnData := EmptyStr;
        for I := 0 to FieldDefs.Count - 1 do
        begin
          CollumnName := FieldDefs[I].Name;
          CollumnValue := FieldByName(CollumnName).AsString;
          CollumnData := CollumnData + TString.IndentTag(LTag + CollumnName + RTag + CollumnValue + CTag + CollumnName + RTag + S1, S2 + LTag);
        end;
        RowData := RowData + CollumnData;
        RowData := RowData + CTag + 'node' + RTag;
        Inc(J);
        Next;
      end;
      Result := Result + XML + S1;
      Result := Result + LTag + 'root' + RTag + S1;
      Result := Result + TString.IndentTag(RowData + S1, S2 + LTag);
      Result := Result + CTag + 'root' + RTag;
    end
    else
      Result := '';
  end;
end;

procedure TQueryBuilder.StartTransaction;
begin
  Self.Query('START TRANSACTION', True);
end;

procedure TQueryBuilder.Commit;
begin
  Self.Query('COMMIT', True);
end;

procedure TQueryBuilder.Rollback;
begin
  Self.Query('ROLLBACK', True);
end;

function TQueryBuilder.ReservedWord<T>(Value : String; Helper: String): String;
begin
  case AnsiIndexStr(UpperCase(String(Value)), ReservedWords) of
    0 .. 5: Result := Result + ',' + Value
  else
    Result := Result + ',' + Helper;
  end;
end;

function TQueryBuilder.ReservedWord<T>(Key : String; Value : String; Helper: String): String;
begin
  case AnsiIndexStr(UpperCase(String(Value)), ReservedWords) of
    0 .. 5: Result := Result + ',' + Key + ' = ' + Value
  else
    Result := Result + ',' + Key + ' = ' + Helper;
  end;
end;

function TQueryBuilder.WhereToStr<T>(&Array: T): String;
var
  I : Integer;
  DBFilters : String;
begin
  DBFilters := EmptyStr;
  if (TypeInfo(T) = TypeInfo(TArray)) then
  begin
    for I := 0 to TArray(&Array).Count - 1 do
      DBFilters := DBFilters + TArray(&Array).Names[I] + SSPACE + TArrayHelper.StrToStr(TArray(&Array).ValuesAtIndex[I], SQUOTE) + SSPACE;
  end
  else
  begin
    for I := 0 to TArrayVariant(&Array).Count - 1 do
      DBFilters := DBFilters + TArrayVariant(&Array).Key[I] + SSPACE + TArrayVariantHelper.VarToStr(TArrayVariant(&Array).ValuesAtIndex[I], SQUOTE, TBinaryMode.Read) + SSPACE;
  end;
  System.Delete(DBFilters, Length(DBFilters), 1);
  Result := DBFilters;
end;

function TQueryBuilder.FetchOne(Input: String; out &Array: TArray) : TQuery;
begin
  Result := Self.FetchOne<TArray>(Input, &Array);
end;

function TQueryBuilder.FetchOne(Input: String; out &Array: TArrayVariant) : TQuery;
begin
  Result := Self.FetchOne<TArrayVariant>(Input, &Array);
end;

function TQueryBuilder.FetchOne(Input: String; out &Array: TArrayField) : TQuery;
begin
  Result := Self.FetchOne<TArrayField>(Input, &Array);
end;

function TQueryBuilder.Insert(Table: String; Field: TArray; Run: Boolean = False; Ignore: Boolean = False): String;
begin
  Result := Self.Insert<TArray>(Table, Field, Run, Ignore);
end;

function TQueryBuilder.Insert(Table: String; Field: TArrayVariant; Run: Boolean = False; Ignore: Boolean = False): String;
begin
  Result := Self.Insert<TArrayVariant>(Table, Field, Run, Ignore);
end;

function TQueryBuilder.Insert(Table: String; Field: TArrayField; Run: Boolean = False; Ignore: Boolean = False): String;
begin
  Result := Self.Insert<TArrayField>(Table, Field, Run, Ignore);
end;

function TQueryBuilder.Update(Table: String; Field: TArray; Run: Boolean = False): String;
begin
  Result := Self.Update<TArray>(Table, Field, Run);
end;

function TQueryBuilder.Update(Table: String; Field: TArrayVariant; Run: Boolean = False): String;
begin
  Result := Self.Update<TArrayVariant>(Table, Field, Run);
end;

function TQueryBuilder.Update(Table: String; Field: TArrayField; Run: Boolean = False): String;
begin
  Result := Self.Update<TArrayField>(Table, Field, Run);
end;

function TQueryBuilder.Update(Table: String; Field: TArray; Where: TArray; Run: Boolean = False): String;
begin
  Result := Self.Update<TArray, TArray>(Table, Field, Where, Run);
end;

function TQueryBuilder.Update(Table: String; Field: TArrayVariant; Where: TArrayVariant; Run: Boolean = False): String;
begin
  Result := Self.Update<TArrayVariant, TArrayVariant>(Table, Field, Where, Run);
end;

function TQueryBuilder.Update(Table: String; Field: TArrayField; Where: TArrayVariant; Run: Boolean = False): String;
begin
  Result := Self.Update<TArrayField, TArrayVariant>(Table, Field, Where, Run);
end;

function TQueryBuilder.Delete(Table: String; Run: Boolean = False): String;
begin
  Result := Self.Delete<TArray>(Table, Run);
end;

function TQueryBuilder.Delete(Table: String; Where: TArray; Run: Boolean = False): String;
begin
  Result := Self.Delete<TArray>(Table, Where, Run);
end;

function TQueryBuilder.Delete(Table: String; Where: TArrayVariant; Run: Boolean = False): String;
begin
  Result := Self.Delete<TArrayVariant>(Table, Where, Run);
end;

function TQueryBuilder.Replace(Table: String; Field: TArray; Run: Boolean = False): String;
begin
  Result := Self.Replace<TArray>(Table, Field, Run);
end;

function TQueryBuilder.Replace(Table: String; Field: TArrayVariant; Run: Boolean = False): String;
begin
  Result := Self.Replace<TArrayVariant>(Table, Field, Run);
end;

function TQueryBuilder.Replace(Table: String; Field: TArrayField; Run: Boolean = False): String;
begin
  Result := Self.Replace<TArrayField>(Table, Field, Run);
end;

function TQueryBuilder.Replace(Table: String; Field: TArray; Where: TArray; Run: Boolean = False): String;
begin
  Result := Self.Replace<TArray, TArray>(Table, Field, Where, Run);
end;

function TQueryBuilder.Replace(Table: String; Field: TArrayVariant; Where: TArrayVariant; Run: Boolean = False): String;
begin
  Result := Self.Replace<TArrayVariant, TArrayVariant>(Table, Field, Where, Run);
end;

function TQueryBuilder.Replace(Table: String; Field: TArrayField; Where: TArrayVariant; Run: Boolean = False): String;
begin
  Result := Self.Replace<TArrayField, TArrayVariant>(Table, Field, Where, Run);
end;

function TQueryBuilder.Upsert(Table: String; Field: TArray; Run: Boolean = False; Ignore: Boolean = False; Duplicate: Boolean = False): String;
begin
  Result := Self.Upsert<TArray>(Table, Field, Run, Ignore, Duplicate);
end;

function TQueryBuilder.Upsert(Table: String; Field: TArrayVariant; Run: Boolean = False; Ignore: Boolean = False; Duplicate: Boolean = False): String;
begin
  Result := Self.Upsert<TArrayVariant>(Table, Field, Run, Ignore, Duplicate);
end;

function TQueryBuilder.Upsert(Table: String; Field: TArrayField; Run: Boolean = False; Ignore: Boolean = False; Duplicate: Boolean = False): String;
begin
  Result := Self.Upsert<TArrayField>(Table, Field, Run, Ignore, Duplicate);
end;

initialization

finalization

TConnectionClass.ReleaseInstance();

end.
